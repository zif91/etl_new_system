"""
–û—Å–Ω–æ–≤–Ω–æ–π DAG –¥–ª—è ETL-–ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π.

–≠—Ç–æ—Ç DAG –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (Meta, GA4, Google Ads, Google Sheets, AppsFlyer)
2. –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
3. –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
4. –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
6. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞–ø–ª–∞–Ω–æ–º

DAG –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 6:00 —É—Ç—Ä–∞.
"""

from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.utils.email import send_email
from airflow.utils.helpers import chain
from airflow.sensors.external_task import ExternalTaskSensor
from airflow.operators.dummy import DummyOperator
from airflow.utils.task_group import TaskGroup
from airflow.operators.email import EmailOperator

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.meta_importer import import_meta_insights
from src.ga4_importer import import_and_store_ga4_metrics
from src.google_ads_importer import import_and_store_google_ads_metrics
from src.promo_importer import import_promo_codes
from src.appsflyer_importer import import_and_store_appsflyer_data
from src.deduplication_process import deduplicate_orders_task
from src.metrics_calculator import calculate_metrics_task
from src.report_generator import generate_reports_task
from src.media_plan_importer import import_media_plan_task
from src.media_plan_integrator import compare_with_media_plan_task
from src.performance_analyzer import compare_month_to_month_task
from src.multi_dimensional_analyzer import multi_dimensional_analysis_task

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∑–∞–¥–∞—á
default_args = {
    'owner': 'analytics-team',
    'depends_on_past': False,
    'start_date': datetime(2025, 1, 1),
    'email_on_failure': True,
    'email_on_retry': False,
    'retries': 3,
    'retry_delay': timedelta(minutes=5),
    'email': ['analytics-alerts@example.com'],
    'execution_timeout': timedelta(hours=2),  # Timeout –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
    'sla': timedelta(hours=4)  # SLA –¥–ª—è –≤—Å–µ–≥–æ DAG
}

def on_failure_callback(context):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤ –∑–∞–¥–∞—á–µ.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏.
    """
    dag_id = context['dag'].dag_id
    task_id = context['task'].task_id
    execution_date = context['execution_date']
    exception = context.get('exception')
    
    subject = f"‚ö†Ô∏è Airflow alert: {task_id} failed in {dag_id}"
    
    body = f"""
    <h2 style="color: red;">Task Failure Alert</h2>
    <p>Task <b>{task_id}</b> in DAG <b>{dag_id}</b> failed on {execution_date}.</p>
    
    <h3>Error details:</h3>
    <pre style="background-color: #f8f8f8; padding: 10px; border-radius: 5px;">
    {exception}
    </pre>
    
    <h3>Task details:</h3>
    <ul>
        <li><b>Execution date:</b> {execution_date}</li>
        <li><b>Task instance:</b> {context.get('task_instance')}</li>
        <li><b>DAG run:</b> {context.get('dag_run')}</li>
    </ul>
    
    <p>Please check the Airflow logs for more details.</p>
    """
    
    send_email(
        to=default_args['email'],
        subject=subject,
        html_content=body
    )

def sla_miss_callback(dag, task_list, blocking_task_list, slas, blocking_tis):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ SLA –∑–∞–¥–∞—á–∏.
    """
    subject = f"üïí Airflow SLA missed: {dag.dag_id}"
    
    html_content = f"""
    <h2 style="color: orange;">SLA Miss Alert</h2>
    <p>SLA was missed for DAG <b>{dag.dag_id}</b>.</p>
    
    <h3>Tasks that missed SLA:</h3>
    <ul>
    """
    
    for task in task_list:
        html_content += f"<li>{task}</li>"
    
    html_content += """
    </ul>
    
    <p>This could indicate performance issues or bottlenecks in the pipeline.</p>
    """
    
    send_email(
        to=default_args['email'],
        subject=subject,
        html_content=html_content
    )

# –°–æ–∑–¥–∞–µ–º DAG
dag = DAG(
    'advertising_data_pipeline',
    default_args=default_args,
    description='–ò–º–ø–æ—Ä—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤',
    schedule_interval='0 6 * * *',  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00
    catchup=False,
    on_failure_callback=on_failure_callback,
    sla_miss_callback=sla_miss_callback,
    tags=['advertising', 'etl', 'analytics'],
    doc_md="""
    # Advertising Data Pipeline
    
    This DAG processes advertising data from multiple sources, including:
    
    * Meta (Facebook/Instagram)
    * Google Analytics 4
    * Google Ads
    * Promo codes from Google Sheets
    * AppsFlyer mobile analytics
    
    ## Pipeline Steps
    
    1. Import data from all sources (parallel)
    2. Deduplicate orders
    3. Calculate metrics
    4. Generate reports
    5. Send notifications
    
    ## Schedule
    
    Runs daily at 6:00 AM.
    """
)

# –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∑–∞–¥–∞—á –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
with TaskGroup(group_id="data_import", dag=dag) as import_group:
    start_import = DummyOperator(
        task_id="start_import",
        dag=dag,
        doc_md="Starting point for data import tasks"
    )
    
    # 1. Meta (Facebook/Instagram) API
    import_meta = PythonOperator(
        task_id='import_meta_data',
        python_callable=import_meta_insights,
        provide_context=True,
        op_kwargs={'execution_date': '{{ ds }}'},  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞—Ç—É –∑–∞–ø—É—Å–∫–∞
        dag=dag,
        sla=timedelta(hours=1),  # SLA –¥–ª—è –∑–∞–¥–∞—á–∏
        doc_md="""
        ### –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Meta (Facebook –∏ Instagram)
        
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Meta Marketing API:
        - –ü–æ–∫–∞–∑—ã, –∫–ª–∏–∫–∏, —Ä–∞—Å—Ö–æ–¥—ã
        - –ö–∞–º–ø–∞–Ω–∏–∏, –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        - UTM-–º–µ—Ç–∫–∏
        
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—ã –ë–î —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –¥–Ω—è–º.
        """
    )
    
    # 2. Google Analytics 4
    import_ga4 = PythonOperator(
        task_id='import_ga4_data',
        python_callable=import_and_store_ga4_metrics,
        provide_context=True,
        op_kwargs={'execution_date': '{{ ds }}'},
        dag=dag,
        sla=timedelta(hours=1),  # SLA –¥–ª—è –∑–∞–¥–∞—á–∏
        doc_md="""
        ### –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Analytics 4
        
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Analytics Data API:
        - –°–µ—Å—Å–∏–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        - –ö–æ–Ω–≤–µ—Ä—Å–∏–∏, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        - –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ UTM-–º–µ—Ç–∫–∏
        
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—ã –ë–î –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏.
        """
    )
    
    # 3. Google Ads
    import_google_ads = PythonOperator(
        task_id='import_google_ads_data',
        python_callable=import_and_store_google_ads_metrics,
        provide_context=True,
        op_kwargs={'execution_date': '{{ ds }}'},
        dag=dag,
        sla=timedelta(hours=1),  # SLA –¥–ª—è –∑–∞–¥–∞—á–∏
        doc_md="""
        ### –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Ads
        
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Ads API:
        - –ü–æ–∫–∞–∑—ã, –∫–ª–∏–∫–∏, —Ä–∞—Å—Ö–æ–¥—ã
        - –ö–æ–Ω–≤–µ—Ä—Å–∏–∏
        - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–º–ø–∞–Ω–∏–π
        
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—ã –ë–î —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –¥–Ω—è–º.
        """
    )
    
    # 4. Google Sheets (–ü—Ä–æ–º–æ–∫–æ–¥—ã)
    import_promo = PythonOperator(
        task_id='import_promo_codes',
        python_callable=import_promo_codes,
        provide_context=True,
        op_kwargs={'execution_date': '{{ ds }}'},
        dag=dag,
        sla=timedelta(hours=1),  # SLA –¥–ª—è –∑–∞–¥–∞—á–∏
        doc_md="""
        ### –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö –∏–∑ Google Sheets
        
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü Google Sheets:
        - –ü—Ä–æ–º–æ–∫–æ–¥—ã
        - –ù–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
        - –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—ã –ë–î –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏.
        """
    )
    
    # 5. AppsFlyer
    import_appsflyer = PythonOperator(
        task_id='import_appsflyer_data',
        python_callable=import_and_store_appsflyer_data,
        provide_context=True,
        op_kwargs={
            'start_date': '{{ ds }}',
            'end_date': '{{ ds }}',
            'include_retention': True,
            'include_ltv': True
        },
        dag=dag,
        sla=timedelta(hours=1),  # SLA –¥–ª—è –∑–∞–¥–∞—á–∏
        doc_md="""
        ### –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ AppsFlyer
        
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ AppsFlyer Reporting API:
        - –£—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        - In-app —Å–æ–±—ã—Ç–∏—è –∏ –ø–æ–∫—É–ø–∫–∏
        - –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∏ LTV
        
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É appsflyer_metrics.
        """
    )
    
    end_import = DummyOperator(
        task_id="end_import",
        dag=dag,
        trigger_rule='all_done',  # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã (–¥–∞–∂–µ —Å –æ—à–∏–±–∫–æ–π)
        doc_md="End point for data import tasks"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –≥—Ä—É–ø–ø–µ
    start_import >> [import_meta, import_ga4, import_google_ads, import_promo, import_appsflyer] >> end_import

# 6. –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
deduplicate = PythonOperator(
    task_id='deduplicate_orders',
    python_callable=deduplicate_orders_task,
    provide_context=True,
    op_kwargs={'execution_date': '{{ ds }}'},
    dag=dag,
    sla=timedelta(hours=1),  # SLA –¥–ª—è –∑–∞–¥–∞—á–∏
    doc_md="""
    ### –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏:
    - –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ transaction_id
    - –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–µ—á–µ—Ç–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    - –†–∞–∑—Ä–µ—à–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∞—Ç—Ä–∏–±—É—Ü–∏–∏
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ —Ç–∞–±–ª–∏—Ü—É deduplicated_transactions.
    """
)

# 7. –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
calculate_metrics = PythonOperator(
    task_id='calculate_metrics',
    python_callable=calculate_metrics_task,
    provide_context=True,
    op_kwargs={'execution_date': '{{ ds }}'},
    dag=dag,
    sla=timedelta(minutes=30),  # SLA –¥–ª—è –∑–∞–¥–∞—á–∏
    doc_md="""
    ### –†–∞—Å—á–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
    - CPO (Cost Per Order)
    - ROI / ROAS
    - CPA (Cost Per Action)
    - –î–†–† (–î–æ–ª—è –†–µ–∫–ª–∞–º–Ω—ã—Ö –†–∞—Å—Ö–æ–¥–æ–≤)
    - –ú–æ–±–∏–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (CPI, CPE, –∏ –¥—Ä.)
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É calculated_metrics.
    """
)

# 8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
generate_reports = PythonOperator(
    task_id='generate_reports',
    python_callable=generate_reports_task,
    provide_context=True,
    op_kwargs={'execution_date': '{{ ds }}'},
    dag=dag,
    sla=timedelta(minutes=30),  # SLA –¥–ª—è –∑–∞–¥–∞—á–∏
    doc_md="""
    ### –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
    
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
    - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏
    - –û—Ç—á–µ—Ç –ø–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω-—Ñ–∞–∫—Ç
    - –ú–æ–±–∏–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é reports –∏/–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ email.
    """
)

# 9. –ò–º–ø–æ—Ä—Ç –º–µ–¥–∏–∞–ø–ª–∞–Ω–∞
import_media_plan = PythonOperator(
    task_id='import_media_plan',
    python_callable=import_media_plan_task,
    provide_context=True,
    op_kwargs={'execution_date': '{{ ds }}'},
    dag=dag,
    sla=timedelta(minutes=30),  # SLA –¥–ª—è –∑–∞–¥–∞—á–∏
    doc_md="""
    ### –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞–ø–ª–∞–Ω–∞
    
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞–ø–ª–∞–Ω–∞ –∏–∑ Google Sheets:
    - –ü–ª–∞–Ω–æ–≤—ã–µ –±—é–¥–∂–µ—Ç—ã
    - –¶–µ–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–ø–æ–∫–∞–∑—ã, –∫–ª–∏–∫–∏, –∑–∞–∫–∞–∑—ã)
    - –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º, —Å—Ç—Ä–∞–Ω–∞–º, —Ç–∏–ø–∞–º –∫–∞–º–ø–∞–Ω–∏–π
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞–ø–ª–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
    """
)

# 10. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞–ø–ª–∞–Ω–æ–º
compare_with_media_plan = PythonOperator(
    task_id='compare_with_media_plan',
    python_callable=compare_with_media_plan_task,
    provide_context=True,
    op_kwargs={
        'execution_date': '{{ ds }}',
        'media_plan_path': "{{ ti.xcom_pull(task_ids='import_media_plan') }}"
    },
    dag=dag,
    sla=timedelta(minutes=30),  # SLA –¥–ª—è –∑–∞–¥–∞—á–∏
    doc_md="""
    ### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞–ø–ª–∞–Ω–æ–º
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π —Å –º–µ–¥–∏–∞–ø–ª–∞–Ω–æ–º:
    - –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ —Å –∑–∞–ø–∏—Å—è–º–∏ –º–µ–¥–∏–∞–ø–ª–∞–Ω–∞
    - –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤ JSON-—Ñ–∞–π–ª.
    """
)

# 10.5 –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ—Å—è—Ü –∫ –º–µ—Å—è—Ü—É
analyze_monthly_performance = PythonOperator(
    task_id='analyze_monthly_performance',
    python_callable=compare_month_to_month_task,
    provide_context=True,
    op_kwargs={
        'execution_date': '{{ ds }}',
        'metrics': ['CPM', 'CPC', 'CPA', 'CPO', 'DRR', 'budget'],
        'dimensions': ['channel', 'audience', 'creative_type']
    },
    dag=dag,
    sla=timedelta(minutes=30),  # SLA –¥–ª—è –∑–∞–¥–∞—á–∏
    doc_md="""
    ### –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ—Å—è—Ü –∫ –º–µ—Å—è—Ü—É
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π:
    - –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º
    - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∏–∑–º–µ—Ä–µ–Ω–∏—è–º
    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data/comparisons/.
    """
)

# 10.6 –ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω-—Ñ–∞–∫—Ç
run_multi_dimensional_analysis = PythonOperator(
    task_id='run_multi_dimensional_analysis',
    python_callable=multi_dimensional_analysis_task,
    provide_context=True,
    op_kwargs={'execution_date': '{{ ds }}'},
    dag=dag,
    sla=timedelta(minutes=20),
    doc_md="""
    ### –ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω-—Ñ–∞–∫—Ç
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏—é –∏ –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –º–µ–¥–∏–∞–ø–ª–∞–Ω–æ–º –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å—Ä–µ–∑–∞–º:
    - –ø–æ –∫–∞–Ω–∞–ª—É
    - –ø–æ —Å—Ç—Ä–∞–Ω–µ
    - –ø–æ —Ç–∏–ø—É –∫–∞–º–ø–∞–Ω–∏–∏
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É `multi_dimensional_analysis`.
    """
)


# 11. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
success_notification = EmailOperator(
    task_id='success_notification',
    to=default_args['email'],
    subject='‚úÖ Advertising Data Pipeline completed successfully | {{ ds }}',
    html_content="""
    <h2 style="color: green;">Pipeline Completed Successfully</h2>
    <p>The advertising data pipeline for {{ ds }} has completed successfully.</p>
    
    <h3>Key Performance Indicators:</h3>
    <ul>
        <li>Data imported from all sources</li>
        <li>Orders deduplicated</li>
        <li>Metrics calculated</li>
        <li>Reports generated and sent</li>
        <li>Media plan comparison completed</li>
    </ul>
    
    <p>Please check the reports in the specified directory or your email inbox.</p>
    """,
    dag=dag
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏

# –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫: –∏–º–ø–æ—Ä—Ç -> –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è -> —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ -> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
chain(
    import_group,
    deduplicate,
    calculate_metrics,
    generate_reports
)

# –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–≤–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏:
# 1. –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ—Å—è—Ü –∫ –º–µ—Å—è—Ü—É
# 2. –ò–º–ø–æ—Ä—Ç –º–µ–¥–∏–∞–ø–ª–∞–Ω–∞ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–∏–º
generate_reports >> [analyze_monthly_performance, import_media_plan]

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞–ø–ª–∞–Ω–æ–º –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
import_media_plan >> compare_with_media_plan

# –ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –º–µ–¥–∏–∞–ø–ª–∞–Ω–æ–º
compare_with_media_plan >> run_multi_dimensional_analysis

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –≤–µ—Ç–æ–∫
chain([run_multi_dimensional_analysis, analyze_monthly_performance], success_notification)
